plugins {
    id 'cpp-application'
}


task genLexer(type: Exec) {
    def inputfile = file('src/staple_lex.l')
    def outputfile = file("${buildDir}/generatedSrc/staple_lex.cpp")

    inputs.file(inputfile)
    outputs.file(outputfile)

    executable 'flex'

    args '-o', "${outputfile}", "${inputfile}"
}

task genParser(type: Exec) {

    ext.headerDir = file("${buildDir}/generatedHeaders")

    def parser_input_file = file('src/staple_parser.y')
    def parser_src_file = file("${buildDir}/generatedSrc/staple_parser.cpp")
    def header_file = file( "${headerDir}/staple_parser.hpp" )


    inputs.file( parser_input_file )
    outputs.file (parser_src_file)
    //outputs.file( header_file )
    outputs.dir(headerDir)

    executable 'bison'

    args '-o', "${parser_src_file}", "--defines=${header_file}", "${parser_input_file}"
}

application {
    source {
        from fileTree('src').matching {
            include '*.cpp'
        }
        from genParser
        from genLexer
    }

    privateHeaders {
        from genParser.headerDir
        from file('src')
    }
}